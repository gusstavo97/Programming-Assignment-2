cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- get$inverse()
if(!is.null){
message("getting cached data")
return(inv)
}
mat <- x$get()
inv<- solve(mat, ...)
x$setInverse(inv)
inv
}
source(Programming-Assignment-2)
source("Programming-Assignment-2.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4,ncol=4))
pmatrix$get()
pematrix$getInverse()
pmatrix$getInverse()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:9, nrow=3,ncol=3))
pmatrix$get()
pmatrix$getInverse()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=2,ncol=2))
pmatrix$get()
cacheSolve(pmatrix)
source('C:/Users/Windows/Desktop/r_rstudio/Programming-Assignment-2/Programming-Assignment-2.R')
pmatrix <- makeCacheMatrix(1:4, nrow = 2, ncol = 2)
pmatrix <- makeCacheMatrix(1:4, nrow=2, ncol=2)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
pmatrix$get()
pmatrix$getInverse()
cacheSolve(pmatrix)
